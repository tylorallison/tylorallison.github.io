<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tylor Allison</title><link href="https://tylorallison.github.io/" rel="alternate"></link><link href="https://tylorallison.github.io/feeds/all.atom.xml" rel="self"></link><id>https://tylorallison.github.io/</id><updated>2018-05-28T00:00:00-07:00</updated><entry><title>Scrap Metal Elites</title><link href="https://tylorallison.github.io/scrap-metal-elites.html" rel="alternate"></link><published>2018-05-28T00:00:00-07:00</published><updated>2018-05-28T00:00:00-07:00</updated><author><name>Tylor Allison</name></author><id>tag:tylorallison.github.io,2018-05-28:/scrap-metal-elites.html</id><summary type="html">&lt;h3&gt;The Game&lt;/h3&gt;
&lt;p&gt;A browser game made in HTML5. RC robot arena destruction!&lt;/p&gt;
&lt;p&gt;Battle of the bots with physics-based destruction, breakable bots and lots of action.  Become a
contender in the challenging title matches to become the new Scrap Metal Elites champion or 
jump right into the action with the Death …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The Game&lt;/h3&gt;
&lt;p&gt;A browser game made in HTML5. RC robot arena destruction!&lt;/p&gt;
&lt;p&gt;Battle of the bots with physics-based destruction, breakable bots and lots of action.  Become a
contender in the challenging title matches to become the new Scrap Metal Elites champion or 
jump right into the action with the Death Match mode.&lt;/p&gt;
&lt;p&gt;Game made in Unity.&lt;/p&gt;
&lt;h3&gt;My Contribution&lt;/h3&gt;
&lt;p&gt;Co-lead and project manager.  Physics design/implementation for ram/spinner/hammer weapons, 
breakable parts, track and wheel steering, damage, and health.  Blender modeling for modular 
bot cubes and bot panels.  Arena camera controller and sound system/manager implementation.&lt;br&gt;
Main UI design for main menu, bot selection, title round selection, in-game HUD including 
health-bars.  Enemy AI implementation.&lt;/p&gt;
&lt;h3&gt;Play&lt;/h3&gt;
&lt;p&gt;This game was developed by members of the Gamkedo club, myself included.  The game is hosted on 
Gamkedo's &lt;a href="https://itch.io/queue/c/188585/gamkedo-club?game_id=262265"&gt;itch.io page&lt;/a&gt;.  Give a try!&lt;/p&gt;
&lt;p&gt;Find out more about the club here: &lt;a href="https://gamkedo.com"&gt;Gamkedo Club&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Media&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Title Screen" src="images/scrap-metal-title.png" width="75%"&gt;
&lt;img alt="Game Play" src="images/scrap-metal.gif" width="75%"&gt;&lt;/p&gt;</content><category term="gamedev"></category><category term="gamkedo"></category><category term="unity"></category></entry><entry><title>Building a Modular Unity Workflow</title><link href="https://tylorallison.github.io/building-a-modular-unity-workflow.html" rel="alternate"></link><published>2017-08-15T00:00:00-07:00</published><updated>2017-08-15T00:00:00-07:00</updated><author><name>Tylor Allison</name></author><id>tag:tylorallison.github.io,2017-08-15:/building-a-modular-unity-workflow.html</id><summary type="html">&lt;h3&gt;Intro&lt;/h3&gt;
&lt;p&gt;So... I've been playing with Unity now for a year or so.  And while I'm not a prolific Unity
developer by any stretch of the imagination, I am getting to the point where I've worked on
multiple projects and have had a need to reuse bits and pieces of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Intro&lt;/h3&gt;
&lt;p&gt;So... I've been playing with Unity now for a year or so.  And while I'm not a prolific Unity
developer by any stretch of the imagination, I am getting to the point where I've worked on
multiple projects and have had a need to reuse bits and pieces of projects.  Now, being the
practical guy I am, I've started doing this by taking the path of least resistance... just
copy-n-paste the code I need into the separate projects, editing as required to remove
project-specific stuff like namespaces, local submodules, etc.  And I guess this works for some
definition of &lt;em&gt;works&lt;/em&gt;.  It seems like it never fails that while I'm updating code for re-use,
that I'll find some minor (or major) improvement on that code, but will only make the change for
the new code base.&lt;/p&gt;
&lt;p&gt;Also, I'm trying to get into the practice of actually testing my code (ya, crazy I know), which leads to additional complexity when trying to cut-n-paste and maintain both the code and tests.&lt;/p&gt;
&lt;p&gt;Cutting to the chase... what I'm going to present is how I've tackled this issue using git
submodules, symlinks and some simple workflow rules.&lt;/p&gt;
&lt;h3&gt;Basics&lt;/h3&gt;
&lt;p&gt;There's a few assumptions that I'm going to make here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You're using Unity and have C# projects&lt;/li&gt;
&lt;li&gt;You're using git for version control&lt;/li&gt;
&lt;li&gt;You're using &lt;strong&gt;OSX Unity&lt;/strong&gt; or are comfortable enough with Windows to translate my unix commands (sorry, haven't tested on Windows)&lt;/li&gt;
&lt;li&gt;You have code that is modular and want to use it across multiple projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To accomplish this last point, I've identified pieces of projects that I want to break out into
separate modules.  For the most part, these modules provide a specific set of classes/functions and are self-contained with very few dependencies on other modules.  Best to plan for this up front if you can.&lt;/p&gt;
&lt;h3&gt;Full Unity Projects&lt;/h3&gt;
&lt;p&gt;To start with, each of my modules is a full unity project.  This allows me to do things like
maintain test scenes with integration tests and have project specific unit tests.  I use a
specific folder structure so that when I link modules together, only the module code gets
integrated.&lt;/p&gt;
&lt;p&gt;So, starting with the standard Unity project folders for an example module named &lt;strong&gt;mymodule&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mymodule/
    ProjectSettings/
    Library/
    Assets/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I build out the Assets folder like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mymodule/Assets/
    Plugins/
    Scenes/
    Scripts/
        test/
            Editor/
        mymodule/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;Plugins&lt;/strong&gt; folder will be used for linking modules together, so it might not be needed for every project.  The &lt;strong&gt;Scenes&lt;/strong&gt; folder is for all of your Unity scenes.  Under &lt;strong&gt;Scripts&lt;/strong&gt;, you'll note there are two separate folders.  A &lt;strong&gt;test&lt;/strong&gt; folder and another &lt;strong&gt;mymodule&lt;/strong&gt; folder.  I use the &lt;strong&gt;test&lt;/strong&gt; folder for all of my project specific tests, including unit tests (under the &lt;strong&gt;Editor&lt;/strong&gt; folder) and Unity integration tests (e.g.: scripts for test scenes, etc.).  All of the module code would go under the second &lt;strong&gt;mymodule&lt;/strong&gt; folder.  This second project folder will be used when we link project code together ... to be explained below.&lt;/p&gt;
&lt;p&gt;To avoid name collisions and keep everything tidy, I use a separate namespace for each
module/project.&lt;/p&gt;
&lt;h3&gt;Git Submodules&lt;/h3&gt;
&lt;p&gt;The whole key for how modules are going to work is through the use of &lt;a href="https://git-scm.com/docs/git-submodule"&gt;Git Submodules&lt;/a&gt; to pull in the external module and the use of symlinks to pull only the code portion of the external module into the referencing project.&lt;/p&gt;
&lt;p&gt;The best way to explain this is probably to walk through a real example.  In this case, I have
two existing modules that I want to reference in a third:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ptjal/tytest"&gt;tytest&lt;/a&gt; - A simple test framework&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ptjal/tymesh"&gt;tymesh&lt;/a&gt; - A utility class for working with dynamic meshes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ptjal/tysimpleshape"&gt;tysimpleshape&lt;/a&gt; - Another utility class that provide simple methods for drawing lines/dots in Unity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's start by assuming that &lt;strong&gt;tytest&lt;/strong&gt; and &lt;strong&gt;tymesh&lt;/strong&gt; already exist and are already under
upstream git control.  Let's also assume that I have &lt;strong&gt;tysimpleshape&lt;/strong&gt; built out as a Unity
project and is under local git control.  &lt;strong&gt;tysimpleshape&lt;/strong&gt; directly references the &lt;strong&gt;tymesh&lt;/strong&gt;
module, as it is using the &lt;em&gt;IMeshData&lt;/em&gt; interface to build out the mesh for simple objects.  It also
references the &lt;strong&gt;tytest&lt;/strong&gt; module for defining a few simple unity integration tests which show
off the rendering of the simple shapes.  Following the directory structure I outlined above,
I've created the following directory tree for this &lt;strong&gt;tysimpleshape&lt;/strong&gt; project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tysimpleshape/Assets/
    Plugins/
    Scenes/
    Scripts/
        test/
        tysimpleshape/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linking the dependent modules is actually pretty straightforward.&lt;/p&gt;
&lt;p&gt;Create a top-level submodules folder under the main &lt;strong&gt;tysimpleshape&lt;/strong&gt; folder and change into that folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% cd ~/repos/tysimpleshape&lt;/span&gt;
&lt;span class="c"&gt;% mkdir submodules&lt;/span&gt;
&lt;span class="c"&gt;% cd submodules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, tell git to add the appropriate submodules using the &lt;strong&gt;git submodule&lt;/strong&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% git submodule add https://bitbucket.org/ptjal/tytest&lt;/span&gt;
&lt;span class="c"&gt;% git submodule add https://bitbucket.org/ptjal/tymesh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That wasn't so bad, but we're not quite done yet.  First a note on what this actually does... it
makes a copy of both of these git repositories under the submodules folder and tells git to keep
track of these submodules as being part of the current repository (&lt;strong&gt;tysimpleshape&lt;/strong&gt;).  It uses
the current head of each of these repositories at the time that you create the submodule
reference.  This is important to note, as making changes to these upstream modules will not
automatically be replicated into the referencing module.  You'll have to update the links
manually (to be covered below).  &lt;/p&gt;
&lt;p&gt;One other note on the command that was run is that we did not tell submodule to run recursively.
This means that if any of the submodules that we reference have dependencies of their own, we
won't pick those subdependencies up automatically.  And this is actually by design.  I want to
try to keep the dependency tree flat and so if there are dependencies on using a submodule, I
actually want the referencing module to own that dependency.  There might be better ways to
handle this, but for now this is working for me.  This doesn't apply for this example, as there
are no nested dependencies in any of these modules.&lt;/p&gt;
&lt;p&gt;To see the current status of affairs after running these submodule commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% git submodule status&lt;/span&gt;
&lt;span class="mi"&gt;2875038&lt;/span&gt;&lt;span class="n"&gt;fba3f4b4a5b9bb27442e88aa9bbe6adff&lt;/span&gt; &lt;span class="n"&gt;submodules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tymesh&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;b0cb96504a1704b5a65827090a628890be4f2d7&lt;/span&gt; &lt;span class="n"&gt;submodules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tytest&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;% git status&lt;/span&gt;
&lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Changes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;committed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;reset&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;...&amp;quot; to unstage)&lt;/span&gt;

    &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitmodules&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;submodules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tymesh&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;submodules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before going on, commit the current changes and push changes upstream.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% git commit -m &amp;quot;linked submodules tymesh and tytest&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;% git push -u origin master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now have the repositories/modules that we reference into our referencing module's repository, but we're not quite ready yet.  Remember that each of the repositories in this scheme are full Unity projects.  We really don't want all of the other project files to show up in the Unity editor for the current project (e.g.: extra scenes, tests, etc.).  By linking the submodules to a top-level directory under the project, Unity will not automatically process the Assets folder in the submodules.  But, we need to make Unity aware of our module code somehow... To make this work, we're going to do something that Unity tells us not to do, create symlinks in projects.  But, we actually do know what we are doing in this case, and it will be OK, trust me.&lt;/p&gt;
&lt;p&gt;So, let's create those symlinks:&lt;/p&gt;
&lt;p&gt;Change the working directory to the &lt;strong&gt;Plugins&lt;/strong&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% cd ~/repos/tysimpleshape/Assets/Plugins&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create relative links to the submodules.  Note that we use the module code folder under &lt;strong&gt;Scripts&lt;/strong&gt;.  This is what makes this work.  We are only pulling in the code from the modules, not the rest of the Unity project files by doing it this way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% ln -s ../../submodules/tymesh/Assets/Scripts/tymesh .&lt;/span&gt;
&lt;span class="c"&gt;% ln -s ../../submodules/tytest/Assets/Scripts/tytest .&lt;/span&gt;
&lt;span class="c"&gt;% ls -l&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;lrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;tylor&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;  &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="n"&gt;Aug&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="n"&gt;tymesh&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;submodules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tymesh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tymesh&lt;/span&gt;
&lt;span class="n"&gt;lrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;tylor&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;  &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="n"&gt;Aug&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="n"&gt;tytest&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;submodules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tytest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it.  Your Unity project should now build, referencing the submodules that you need.&lt;/p&gt;
&lt;h3&gt;Maintaining Submodules&lt;/h3&gt;
&lt;p&gt;As I mentioned above, when you create a reference to a submodule, git will determine the current
head of the submodule and store that as a reference.  If you make changes to the upstream
module, you won't see those changes until you tell git to update the local references.  Again,
this is super easy (as of git 1.8.2):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% git submodule update --remote --merge&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To keep things simple, I strongly encourage you to only change referenced submodules upstream,
not locally within the local submodule links.  I know you can do this, I just find it less
confusing not to.&lt;/p&gt;
&lt;h3&gt;Git Clone with Submodules&lt;/h3&gt;
&lt;p&gt;The above steps get you setup with your github repo referencing submodules.  But what if you
want to clone a git repo that already has submodule references?  Git clone will not
automatically follow submodule references, but you can tell it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% git clone --recursive https://ptjal@bitbucket.org/ptjal/tysimpleshape.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Try It Out&lt;/h3&gt;
&lt;p&gt;The referenced repositories are public.  Feel free to try it out and/or poke around.  Not much
to look at, but here's my little simple shape test:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Test Shapes" class="img-center" src="images/TestShapes.png"&gt;&lt;/p&gt;
&lt;h3&gt;Credits&lt;/h3&gt;
&lt;p&gt;No, I didn't come up with all myself.  In fact, most of what I'm doing has been described in
&lt;a href="http://blog.prime31.com/a-method-for-working-with-shared-code-with-unity-and-git/"&gt;Prime31's Blog&lt;/a&gt;.  I changed up some of the directory layout to suit my needs.&lt;/p&gt;</content><category term="gamedev"></category><category term="unity"></category><category term="modularity"></category><category term="git"></category><category term="workflow"></category><category term="submodule"></category></entry><entry><title>Singed Dirt</title><link href="https://tylorallison.github.io/singed-dirt.html" rel="alternate"></link><published>2017-08-02T00:00:00-07:00</published><updated>2017-08-02T00:00:00-07:00</updated><author><name>Tylor Allison</name></author><id>tag:tylorallison.github.io,2017-08-02:/singed-dirt.html</id><summary type="html">&lt;h3&gt;The Game&lt;/h3&gt;
&lt;p&gt;A modern 3d take on the classic Scorched Earth game supporting local hot seat, matchmaker and
local lan multiplayer.&lt;/p&gt;
&lt;p&gt;Enter the arena to vent your frustrations by dominating your opponents.  Or just have fun with the characters and explore our unique game play features.  Watch out for the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The Game&lt;/h3&gt;
&lt;p&gt;A modern 3d take on the classic Scorched Earth game supporting local hot seat, matchmaker and
local lan multiplayer.&lt;/p&gt;
&lt;p&gt;Enter the arena to vent your frustrations by dominating your opponents.  Or just have fun with the characters and explore our unique game play features.  Watch out for the big boom!&lt;/p&gt;
&lt;h3&gt;My Contribution&lt;/h3&gt;
&lt;p&gt;Network code, lobby UI and code, items pickups, chat, turns and ammo UI, voronoi terrain and
procedural spawn locations, player customization menu.&lt;/p&gt;
&lt;h3&gt;Play&lt;/h3&gt;
&lt;p&gt;This game was developed by members of the Gamkedo club, myself included.  Find out more about the
club, or play this game: &lt;a href="http://gamkedo.com/club/#games"&gt;Play @ Gamkedo&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Media&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Title Screen" class="img-center" src="images/singed-title.png"&gt;
&lt;img alt="Game Play" src="images/singed-play.gif" width="50%"&gt;&lt;/p&gt;</content><category term="gamedev"></category><category term="gamkedo"></category><category term="unity"></category></entry><entry><title>Blogging Made Easy with Pelican and GitHub Pages</title><link href="https://tylorallison.github.io/blogging-made-easy-with-pelican-and-github-pages.html" rel="alternate"></link><published>2017-01-29T00:00:00-08:00</published><updated>2017-01-29T00:00:00-08:00</updated><author><name>Tylor Allison</name></author><id>tag:tylorallison.github.io,2017-01-29:/blogging-made-easy-with-pelican-and-github-pages.html</id><summary type="html">&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This post serves as a quick tutorial on setting up a web site using statically generated pages using
&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; for static site management, &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; for page authoring, and &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for hosting.  These are all steps that I have used already to set up this site.  The intent is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This post serves as a quick tutorial on setting up a web site using statically generated pages using
&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; for static site management, &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; for page authoring, and &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for hosting.  These are all steps that I have used already to set up this site.  The intent is to have a web hosting solution that I can easily add content to without having to worry too much about fiddling with standard web development work and maintenance.  Oh, and all of this is free, so that is definitely a plus.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;Pelican is an actively maintained static site generator written in python.  The basic idea is that you use a site template that will apply a common theme across all of your content pages.  You write your content using Markdown, reStructuredText, or Ascii and Pelican is run to create an output folder which can then be used as your static site.&lt;/p&gt;
&lt;p&gt;Set up is really easy.  You can find more detailed instructions in &lt;a href="http://docs.getpelican.com/en/stable/quickstart.html"&gt;Pelican's Quickstart Guide&lt;/a&gt;, but it's so simple, I'll copy the steps below.&lt;/p&gt;
&lt;h4&gt;Installing Pelican and Markdown&lt;/h4&gt;
&lt;p&gt;If you don't already have python3 and pip installed on your system, check out &lt;a href="https://www.python.org/downloads/"&gt;Python's Download Page&lt;/a&gt; and &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip's Install Page&lt;/a&gt;.  The following documentation assumes you have both of these installed as well as git and a decent editor (I like &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; but of course with my &lt;a href="https://github.com/atom/vim-mode"&gt;vim-mode&lt;/a&gt; enabled).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Selecting a Theme&lt;/h4&gt;
&lt;p&gt;I already mentioned the concept of your site theme.  You can think of it as your web template that gets applied to all of your static content as well as creating the look and feel for you main page.  There are a good number of themes that are freely available through &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican's Theme Repo&lt;/a&gt; or other public repos if you dig around.  Some seem better than others.  Pelican has a &lt;a href="http://www.pelicanthemes.com/"&gt;live theme site&lt;/a&gt; where you can review the &lt;em&gt;official&lt;/em&gt; themes.  I personally like, and am using &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt;.  If you don't like any of the options, you can always create your own.  They are Jinja templates and there are instructions &lt;a href="http://docs.getpelican.com/en/stable/themes.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, when installing Pelican, you only get two themes: notmyidea and simple.  To use any other theme, you need to make pelican aware of that theme.  Easiest way to try different themes out is to pull down the entire pelican-themes repo, then use the &lt;em&gt;pelican-themes&lt;/em&gt; command line tool to import your selected theme into pelican.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;cd&lt;/span&gt; ~/repos
git clone https://github.com/getpelican/pelican-themes.git
pelican-themes -s ~/repos/pelican-themes/Flex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above commands clone the pelican-themes repo into a subdirectory under ~/repos and then creates a symlink (instead of a full copy) of the Flex theme into Pelican's theme directory.  Replace "Flex" with whichever theme you select.&lt;/p&gt;
&lt;h3&gt;Building Your Site&lt;/h3&gt;
&lt;p&gt;The main concept that I am using to manage my site is to use a git repository for the static content pages, Pelican configuration, and related site content like images, etc.  Pelican makes this super simple to get started.  Simply create a new top-level directory for your web site, then run the &lt;em&gt;pelican-quickstart&lt;/em&gt; on that directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;cd&lt;/span&gt; ~/repos
mkdir mysite
pelican-quickstart -p mysite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script will ask you some preliminary questions about your site. If you want to follow along
with this guide, pay special attention to the questions I have highlighted below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; https://tylorallison.github.io
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Do you want to generate a Fabfile/Makefile to automate generation &lt;span class="k"&gt;and&lt;/span&gt; publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Do you want an auto-reload &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme &lt;span class="k"&gt;and&lt;/span&gt; site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change out the URL prefix to match your site.  After you have run this script, you should have a few artifacts in your site directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;content&lt;/em&gt; -- This is the subdirectory where you will add all of your static content.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;output&lt;/em&gt; -- This is the default subdirectory where your generated pages get put.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt; -- This is the main config file for your site.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;publishconf.py&lt;/em&gt; -- This file is used to create the final version of your output files before publishing.  It basically overwrites and/or appends values from the main config file.  This is useful if you wish to view your local changes first via a localhost web server before publishing live (not a bad idea).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;develop_server.sh&lt;/em&gt; -- Speaking of testing first, this is a super handy script that builds your site content and starts a simple web server locally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First thing that you should do is modify the base pelicanconf.py to use your selected theme.  Edit the file via your editor and add the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;THEME = &amp;quot;Flex&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replacing Flex with whatever theme you have decided to use.  You may want to review any documentation for your selected them as well, as often they may have theme-specific configuration.&lt;/p&gt;
&lt;h3&gt;Draft Your Content&lt;/h3&gt;
&lt;p&gt;Now you should be set to start drafting content.  Just a few organizational things you may want to consider.  Pelican supports both a notion of category and tagging for the articles you create. These are both cool ways to put some structure to the content that you are generating. Most of the Pelican themes include templates for both category and tagging where you can view articles that fall under each type. Finally, you may wish to think about the folder organization of all of your articles.  Basically anything under the content directory will be scanned when you build your site.  And the layout of your site will not be dependent on the folder structure you use to store your articles.  Just something to keep in mind.&lt;/p&gt;
&lt;p&gt;Now to draft your first article.  You'll need to decide which content format to use.  I will be demonstrating using Markdown, but feel free to visit the Pelican pages to see about support for other formats.  Next, create a new markdown file by opening a new file in your editor of choice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;cd&lt;/span&gt; ~/repos/mysite/content
vim my-first-article.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines to the tope of your new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then fill in the rest and you are done.  Note, the Tags are comma-separated and can allow for spaces within your tags.&lt;/p&gt;
&lt;h3&gt;Generating and Viewing Content Locally&lt;/h3&gt;
&lt;p&gt;The next step is to build out your content.  The easiest way of doing this is using the supplied &lt;em&gt;develop_server.sh&lt;/em&gt; script.  Running this script will build a local copy of your site for you and start a python-based web server for you (defaulting to your localhost address on port 8000).  Simply start the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;cd&lt;/span&gt; ~/repos/mysite
./develop_server.sh start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then point your browser to 'http://127.0.0.1:8000' and view your content.  As long as this script is running you can continue to make local changes to content files, images, etc. and the script will detect those changes, rebuild and make them immediately available for you to view via your web browser.  Pretty handy indeed.&lt;/p&gt;
&lt;p&gt;To stop the script, simply use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./develop_server.sh stop
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Hosting to GitHub Pages&lt;/h3&gt;
&lt;p&gt;The final piece is to create a workflow to publish your new content to your personalized &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; repository.  The steps I am documenting will include instructions for setting up two repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your Site Repository -- A repository for the static site content (~/repos/mysite)&lt;/li&gt;
&lt;li&gt;Your GitHub Pages Repository -- A repository for the generated output for your GitHub personal page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Starting with the site repository, follow these steps to create the git repo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login to your github.com account and create a new repository with a name that matches your
    site directory name (mysite in this example).&lt;/li&gt;
&lt;li&gt;Create a .gitignore file, adding the output directory, &lt;strong&gt;pycache&lt;/strong&gt; files, etc.&lt;/li&gt;
&lt;li&gt;Now locally create your repository using the git command line, adding your content:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;cd&lt;/span&gt; ~/repos/mysite
git init
git add *.py content Makefile develop_server.sh
git commit -m &lt;span class="s2"&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Push your changes to GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin https://github.com/tylorallison/mysite.git
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, create your GitHub Pages repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login to your github.com account and create a new repository with your appropriate site name.&lt;br&gt;
    The naming convention needs to exactly match: &lt;em&gt;youraccountname&lt;/em&gt;.github.io.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The workflow that you will set up to publish changes includes running the final publish make command, updating your site repo's gh-pages branch with the contents of the output directory, then pushing the updated gh-pages branch to your GitHub Pages repository.  It might sound complicated, but it actually can be accomplished with the following three commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make publish
ghp-import output
git push https://github.com/tylorallison/tylorallison.github.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, replacing my username with your github account name.  Follow this same workflow any time you have new content to publish. The &lt;a href="https://github.com/davisp/ghp-import"&gt;GHP Import&lt;/a&gt; tool is a simple tool that takes some of the more complex git commands and simplifies them for you.  And it is a pip install away:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Adding User Comment Support&lt;/h3&gt;
&lt;p&gt;If you want to provide users with the capability to post comments to any of your articles, that's not something static pages can be used for.  However, Pelican integrates with &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;, which provides a free hosting service for user comments for any website. And integration is super simple.  Create an account on disqus.com, and create a new site.  You'll need to supply:
&lt;em&gt; Website Name -- enter a unique name for your site.
&lt;/em&gt; Category -- select from one of their categories.&lt;/p&gt;
&lt;p&gt;Then, go to your pelicanconf.py (or publishconf.py if you only want to enable for published pages) and add the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DISQUS_SITENAME = &amp;quot;yoursitename&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Republish your content and it is as easy as that.&lt;/p&gt;
&lt;h3&gt;Personalizing using Gravatar and favicon.ico&lt;/h3&gt;
&lt;p&gt;If you do happen to use the Flex them for Pelican, you'll want to add your own Site Logo.  I stumbled upon &lt;a href="http://gravatar.com"&gt;gravatar.com&lt;/a&gt; and thought it was pretty cool.  The basic idea is that you use this site to automatically link a common avatar for your online presence, carrying over to any of your online discussions you may partake in.  As I want my online presence to be associated with this site, it makes sense to use it as my site logo.  &lt;/p&gt;
&lt;p&gt;To integrate w/ Gravatar on your site, create a free gravatar account, upload an image that you want to serve as your global avatar, then update your pelicanconf.py file with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SITELOGO = &amp;#39;//s.gravatar.com/avatar/221e6e31de6232bf3175b820a4a961e7?s=120&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will need to replace the hash (221e6e...61e7 value) with your own unique value.  This is the MD5 checksum of the email address you used to sign up for your Gravatar account.  You can either compute this yourself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -n &amp;lt;your email address&amp;gt; | md5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or use the &lt;a href="http://en.gravatar.com/site/check/"&gt;Gravatar Site Check page&lt;/a&gt; to generate the link for you.&lt;/p&gt;
&lt;p&gt;I would also recommend that you select a favicon.ico to use for your site.  This is the little symbol that appears in the top tab in your web browser.  Find or create a favorite icon for your site and save it in your content directory (e.g.: content/images/favicon.ico).  Then add the following to your pelicanconf.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FAVICON = &amp;#39;/images/favicon.ico&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;OK, so maybe this wasn't as quick as I expected.  But really, the steps involved here are pretty easy.  And once setup, you can add new content to your site in as little as 4 commands.  And you haven't had to touch any CSS style sheets, raw HTML, or any of the like.&lt;/p&gt;</content><category term="pelican"></category><category term="blog"></category><category term="markdown"></category><category term="disqus"></category><category term="gravatar"></category><category term="github pages"></category></entry><entry><title>Hello World</title><link href="https://tylorallison.github.io/hello-world.html" rel="alternate"></link><published>2017-01-27T00:00:00-08:00</published><updated>2017-01-27T00:00:00-08:00</updated><author><name>Tylor Allison</name></author><id>tag:tylorallison.github.io,2017-01-27:/hello-world.html</id><summary type="html">&lt;h3&gt;My Story&lt;/h3&gt;
&lt;p&gt;As with any good introduction into new territory, this story starts here at &lt;strong&gt;hello world&lt;/strong&gt;.  And I'll build from there.  Just want to provide a quick introduction for myself and to provide a little context to what I'm trying to do with this blog.&lt;/p&gt;
&lt;p&gt;First, I am an …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;My Story&lt;/h3&gt;
&lt;p&gt;As with any good introduction into new territory, this story starts here at &lt;strong&gt;hello world&lt;/strong&gt;.  And I'll build from there.  Just want to provide a quick introduction for myself and to provide a little context to what I'm trying to do with this blog.&lt;/p&gt;
&lt;p&gt;First, I am an aspiring game designer and developer.  This has been a lifelong dream, but I have really only started working towards it in the past year or so.  I am a software developer by trade and my real job is currently working in network and application security, focusing on secure software development and architecture along with cryptography and VPN technologies.&lt;/p&gt;
&lt;p&gt;I am also a husband and father and part of a very active household.  This put together with a &lt;em&gt;real job&lt;/em&gt; means that I get limited time to work on gamedev.  So my progress on projects and with this blog will not be at a rapid pace.  But I continue to do what I can.&lt;/p&gt;
&lt;h3&gt;My Purpose&lt;/h3&gt;
&lt;p&gt;So, yes, this will be yet another game developer blog.  There's tons of them out there, so what
am I planning on doing that will make this any different?  Honestly, nothing.  My intent isn't
to be flashy or new, but to simply document some of my experiences as a newcomer to game
development. I plan to share some of the struggles I've had, including how I've overcome them.
Tips, tricks, ideas and even failures are all fair game.  &lt;/p&gt;
&lt;p&gt;Throughout my learning experience, I've googled this and borrowed that.  I've leaned heavily
on those that have come before me and my sincere hope is that someone with similar interests
and experience may stumble upon one of my articles and it may help them.&lt;/p&gt;
&lt;p&gt;Some of the topics I plan on covering include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Voxel engine and isometric surface extraction&lt;/li&gt;
&lt;li&gt;Procedural generation, in particular planet-based terrain systems&lt;/li&gt;
&lt;li&gt;Constructed solid geometry&lt;/li&gt;
&lt;li&gt;Bezier patches&lt;/li&gt;
&lt;li&gt;Code/C# optimizations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sneak Peek&lt;/h3&gt;
&lt;p&gt;In a not-so-distant future post I plan to cover a little on procedure generation of a planet. I had some help in getting started here, so I'll reference that awesome work and what I've done to make it my own.
&lt;img alt="From Hex" class="img-center" src="images/HexWorld.png"&gt;&lt;/p&gt;</content><category term="gamedev"></category><category term="bio"></category><category term="intro"></category></entry></feed>